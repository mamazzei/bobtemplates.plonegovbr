# -*- coding: utf-8 -*-

from {{{ package.namespace }}}.{{{ package.namespace2 }}}.{{{ package.name }}}.config import PROJECTNAME
from {{{ package.namespace }}}.{{{ package.namespace2 }}}.{{{ package.name }}}.testing import FUNCTIONAL_TESTING
from {{{ package.namespace }}}.{{{ package.namespace2 }}}.{{{ package.name }}}.testing import INTEGRATION_TESTING
from plone.app.testing import login
from plone.app.testing import setRoles
from plone.app.testing import TEST_USER_ID
from plone.app.testing import TEST_USER_NAME
from plone.browserlayer.utils import registered_layers
from plone.testing.z2 import Browser
from Products.GenericSetup.upgrade import listUpgradeSteps
from zope.site.hooks import setSite

import unittest2 as unittest
import pkg_resources

PLONE_VERSION = pkg_resources.require("Plone")[0].version

class Plone43TestCase(unittest.TestCase):

    layer = FUNCTIONAL_TESTING

    @unittest.skipUnless('4.3' in PLONE_VERSION, "Plone 4.3 specific")
    def test_static_resource_grokker(self):
        """Grok does not register automatically the static resources anymore
        see: http://svn.zope.org/five.grok/trunk/src/five/grok/meta.py?rev=123298&r1=112163&r2=123298
        """
        portal = self.layer['portal']
        app = self.layer['app']

        browser = Browser(app)
        portal_url = portal.absolute_url()

        browser.open('%s/{{{ package.namespace }}}.{{{ package.namespace2 }}}.{{{ package.name }}}' % portal_url)
        self.assertEqual(browser.headers['status'], '200 Ok')


class BaseTestCase(unittest.TestCase):

    '''base test case to be used by other tests'''

    layer = INTEGRATION_TESTING

    profile = '{{{ package.namespace }}}.{{{ package.namespace2 }}}.{{{ package.name }}}:default'

    def setUpUser(self):
        setRoles(self.portal, TEST_USER_ID, ['Manager', 'Editor', 'Reviewer'])
        login(self.portal, TEST_USER_NAME)

    def setUp(self):
        portal = self.layer['portal']
        setSite(portal)
        self.portal = portal
        self.qi = getattr(self.portal, 'portal_quickinstaller')
        self.wt = getattr(self.portal, 'portal_workflow')
        self.st = getattr(self.portal, 'portal_setup')
        self.setUpUser()


class TestInstall(BaseTestCase):

    '''ensure product is properly installed'''

    def test_installed(self):
        self.assertTrue(self.qi.isProductInstalled(PROJECTNAME),
                        '%s not installed' % PROJECTNAME)

    def test_version(self):
        self.assertEquals(
            self.st.getLastVersionForProfile(self.profile),
            (u'1000',)
        )


class TestUpgrade(BaseTestCase):

    '''ensure product upgrades work'''

    def test_to2000_available(self):

        upgradeSteps = listUpgradeSteps(self.st,
                                        self.profile,
                                        '1000')
        step = [step for step in upgradeSteps
                if (step[0]['dest'] == ('2000',))
                and (step[0]['source'] == ('1000',))]
        self.assertEquals(len(step), 1)


class TestUninstall(BaseTestCase):

    '''ensure product is properly uninstalled'''

    def setUp(self):
        BaseTestCase.setUp(self)
        self.qi.uninstallProducts(products=[PROJECTNAME])

    def test_uninstalled(self):
        self.assertFalse(self.qi.isProductInstalled(PROJECTNAME))

